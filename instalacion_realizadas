// Se crea una carpeta nueva para el curso accedemos a ella via teminal para inicia

// verificamos que version de nodejs tememos instalada y usamos la version 20.15.0
$ nvm list

// si no la tenemos la instalamos
$ nvm install 20.15.0

// si la tenemos la usamos
$ nvm use 20.15.0

// inicializo mi esquema de trabajo
$ npm init -y

// instalo las dependencias requeridas en el curso
$ npm i express dotenv cors helmet
$ npm i -D typescript @types/node @types/express @types/dotenv @types/cors @types/helmet

// creamos un archivo de configuracion de typescript
npx tsc --init

//---Hasta aqui el commit inicial
//(opcional si tienes una cuenta de github o gitlab para llevar un seguimiento de cambios)
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin ****Aqui va la ruta de tu repositorio remoto****
git push -u origin main

//------------- Inicia la ConfiguraciÃ³n ---------------------
//Aqui se define la arquitectrua MVC con express, 
//Se crea la estructura las carpeta donde se almacena los componentes
//Se define el objeto al que se le va a aplicar MVC en el ejercicio: user  
// Modelo de comunicacion MVC aplicado al objeto 
// routes -> controller -> services -> repositories
// En los repositories se defines la conexiones a base por medio de algun ORM 


//-------------- Se define las entradas -----------------------
//Se crea un archivo main.ts en la raiz de src:
// 1. Se define el listen para el servidor de escucha
// 2. Se define el contructor que carga los metodos: routes, middlewares y config
// 3. Se define el servidor
// 4. Se implemente el denomio que levanta el servicio en package.json con nodemon
$ npm i nodemon
$ npm i ts-node

//-------------- Se define las entradas (variables de entorno)-----------------------
//Se instala otro dependencia
$ npm i envalid
// aqui se usa la libreria dotenv en src/config/server.ts

//--------------- Se configura la seguridad en los middleware ------------------------
// Aqui usamos helmet y cors

//----------------Implemenacion de iterconexion de servicio, controlador y rutas
//Aqui se crean los archivo user.services.ts, user.controller y user.router

//---- Tiempo: 1:17:15 -> Aqui se  define los wrappers
// La arquitectura: (-> significa "llama a..")
// controller -> helper -> interface

//---- Tiempo: 1:24:17 -> Aqui se definen wrappers dentro de los catch
